model = Flow(
  (_transform): CompositeTransform(
    (_transforms): ModuleList(
      (0): MaskedPiecewiseRationalQuadraticAutoregressiveTransform(
        (autoregressive_net): MADE(
          (initial_layer): MaskedLinear(in_features=6, out_features=128, bias=True)
          (blocks): ModuleList(
            (0-1): 2 x MaskedResidualBlock(
              (batch_norm_layers): ModuleList(
                (0-1): 2 x BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
              )
              (linear_layers): ModuleList(
                (0-1): 2 x MaskedLinear(in_features=128, out_features=128, bias=True)
              )
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (final_layer): MaskedLinear(in_features=128, out_features=354, bias=True)
        )
      )
      (1): Permutation()
      (2): MaskedPiecewiseRationalQuadraticAutoregressiveTransform(
        (autoregressive_net): MADE(
          (initial_layer): MaskedLinear(in_features=6, out_features=128, bias=True)
          (blocks): ModuleList(
            (0-1): 2 x MaskedResidualBlock(
              (batch_norm_layers): ModuleList(
                (0-1): 2 x BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
              )
              (linear_layers): ModuleList(
                (0-1): 2 x MaskedLinear(in_features=128, out_features=128, bias=True)
              )
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (final_layer): MaskedLinear(in_features=128, out_features=354, bias=True)
        )
      )
      (3): Permutation()
      (4): MaskedPiecewiseRationalQuadraticAutoregressiveTransform(
        (autoregressive_net): MADE(
          (initial_layer): MaskedLinear(in_features=6, out_features=128, bias=True)
          (blocks): ModuleList(
            (0-1): 2 x MaskedResidualBlock(
              (batch_norm_layers): ModuleList(
                (0-1): 2 x BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
              )
              (linear_layers): ModuleList(
                (0-1): 2 x MaskedLinear(in_features=128, out_features=128, bias=True)
              )
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (final_layer): MaskedLinear(in_features=128, out_features=354, bias=True)
        )
      )
      (5): Permutation()
      (6): MaskedPiecewiseRationalQuadraticAutoregressiveTransform(
        (autoregressive_net): MADE(
          (initial_layer): MaskedLinear(in_features=6, out_features=128, bias=True)
          (blocks): ModuleList(
            (0-1): 2 x MaskedResidualBlock(
              (batch_norm_layers): ModuleList(
                (0-1): 2 x BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
              )
              (linear_layers): ModuleList(
                (0-1): 2 x MaskedLinear(in_features=128, out_features=128, bias=True)
              )
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (final_layer): MaskedLinear(in_features=128, out_features=354, bias=True)
        )
      )
      (7): Permutation()
      (8): MaskedPiecewiseRationalQuadraticAutoregressiveTransform(
        (autoregressive_net): MADE(
          (initial_layer): MaskedLinear(in_features=6, out_features=128, bias=True)
          (blocks): ModuleList(
            (0-1): 2 x MaskedResidualBlock(
              (batch_norm_layers): ModuleList(
                (0-1): 2 x BatchNorm1d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
              )
              (linear_layers): ModuleList(
                (0-1): 2 x MaskedLinear(in_features=128, out_features=128, bias=True)
              )
              (dropout): Dropout(p=0.1, inplace=False)
            )
          )
          (final_layer): MaskedLinear(in_features=128, out_features=354, bias=True)
        )
      )
      (9): Permutation()
    )
  )
  (_distribution): StandardNormal()
  (_embedding_net): Identity()
)
